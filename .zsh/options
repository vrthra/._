#------------------------------------------------------------------------------
# Extended globing: zshexpn
#    list all symlinks in dir => ls *(@)
#    ls **/*.rb             : recursive globbing
#    ls ***/*.rb            : follow symlinks
#    ls [^f]oo              : any _oo except foo
#    ls ^(foo|bar)          : any except foo or bar
#
# -approximate matching:
#    ls (#a1)foobar         : correct upto one mistake. (#a<n>)
#
# -qualifiers (#q_)   at the end of match in (). - can be combined
#                   . regular @ symlinks / dirs = sockets p named_pieps
#                   * excutable
#                   r w x owner:read,write,exec
#    ls ./*(#q@)          : all symlinks
#    ls ./*(#q.)          : all regular files
#    echo ./*(#q/)        : all dirs
#    echo ./*(#q^/)       : all except dirs
#     echo ./*(#qx)(#q^/) : all executable not dir
#------------------------------------------------------------------------------
setopt EXTENDED_GLOB
setopt extendedglob
#------------------------------------------------------------------------------
# echo animal==cat -> animal=/bin/cat
setopt MAGIC_EQUAL_SUBST
setopt magicequalsubst
#------------------------------------------------------------------------------
setopt NO_sh_file_expansion
#setopt correct
#------------------------------------------------------------------------------
# perform cd if specified directly without 'cd' and dir exists
setopt AUTO_CD
#------------------------------------------------------------------------------
# make cd push old dir to dirstack
setopt AUTO_PUSHD
setopt autopushd
#------------------------------------------------------------------------------
setopt pushdignoredups
#------------------------------------------------------------------------------
# get zsh to print exit value on failure of cmd
setopt printexitvalue
#------------------------------------------------------------------------------
# dont move to the end of word on completion
setopt complete_in_word
#------------------------------------------------------------------------------
setopt SH_WORD_SPLIT
#------------------------------------------------------------------------------
# allow for i in *; echo $i
# also select, if , function
setopt SHORT_LOOPS

#------------------------------------------------------------------------------
# rc shell like command execution. e.g PATH=.home/bin, file=.home/bin/sunos/me
# sunos/me is executed
setopt PATH_DIRS
#------------------------------------------------------------------------------
setopt HIST_VERIFY # ask user before execution
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE  # ignore commands with space in front.
setopt HIST_NO_STORE # ignore fc commands in history
#------------------------------------------------------------------------------
# disable ^Q, ^S
unset FLOW_CONTROL
#------------------------------------------------------------------------------

#setopt sharehistory --annoying

makeopts=(clobber all publish installation compile run-server run-client BUILD_VARIANT=DEBUG BUILD_VARIANT=OPTIMIZED compile-admin-cli assemble-admin-cli publish-admin-cli)
compctl -k makeopts gmake make

compctl -g '(*|.*)~*.(class|o|png|db)' vim vi gvim
compctl -g '*.java' javac
compctl -g '*.pdf' xpdf

jdbopts=(-attach)
compctl -k jdbopts jdb

## - ignore CVS directories
#compctl -g '(*|.*)~*CVS(/)' cd
compctl -g '(*|.*)~*CVS' cd

hosts=(agneyam vayavyam varunam bhoumam vaishnavam destiny1 adithya souram shivam)
apps=(proxy41 webserver70 proxy_expt)

compctl -k hosts telnet ftp rlogin rsh rcp
compctl -k apps changeapp

set -o vi
bindkey -v
bindkey '^Z' accept-and-hold
bindkey "^A" beginning-of-line
bindkey "^E" end-of-line
#accept-and-infer-next-history
#bindkey '"' vi-set-buffer
bindkey '^R' push-line
bindkey '^X' execute-named-cmd
bindkey '^K' vi-kill-line
#setopt emacs
#^D - show completion

compctl -g "/tmp/screens/S-${USER}/*(p:t)" screen
compctl -g "*(-/D)" + -g "*.class(.:r)" java
#kill-line -> ^U
compctl -v getln getopts read unset vared
compctl -v -S '=' -q declare export integer local readonly typeset
compctl -u -x 'w[1,-]p[3,-1]' -l sh - 'w[1,-]' -u - 'p[2,-1]' -l sh -- su

if [[ "$ZSH_VERSION_TYPE" == 'new' ]] 
then
#-----------zsh completion [new style]
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
## No CVS in cd
##zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#CVS'
## and no lost+found
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#lost+found'
#
## pids 
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:*:*:processes' menu yes select
zstyle ':completion:*:*:*:*:processes' force-list always
zstyle ':completion:*:*:*:*:processes' list-colors "=(#b) #([0-9]#)*=36=31"
#zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=$color[cyan]=$color[red]"
zstyle ':completion:*:processes' command 'ps -au$USER'

fi
# Incremental search is elite!
#bindkey -M vicmd "/" history-incremental-search-backward
#bindkey -M vicmd "?" history-incremental-search-forward

# Search based on what you typed in already
bindkey -M vicmd "//" history-beginning-search-backward
bindkey -M vicmd "??" history-beginning-search-forward

bindkey -M vicmd "q" push-line
bindkey -M vicmd 'u' undo

bindkey '\e[A' up-line-or-history
bindkey '\e[B' down-line-or-history

bindkey '\eOA' up-line-or-history
bindkey '\eOB' down-line-or-history

bindkey '\e[C' forward-char
bindkey '\e[D' backward-char

bindkey '\eOC' forward-char
bindkey '\eOD' backward-char

# go into vi mode for commands
#zle-line-init() { zle -K vicmd; }
#zle -N zle-line-init
bindkey '\e/' vi-history-search-backward
