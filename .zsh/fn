#!/usr/bin/zsh
eecs() {
   machine=$1
   shift
   ssh gopinath@$machine.eecs.oregonstate.edu $*
}

engr() {
   machine=$1
   shift
   ssh -X -t gopinath@$machine.engr.oregonstate.edu $*
}

onid() {
       ssh -t gopinatr@shell.onid.oregonstate.edu $*
}

+ () {
    (cd $1 && env -u HISTFILE i_CDSTACK=$((i_CDSTACK + 1)) DIRS="$DIRS $PWD" i_NOINIT=1 zsh)
}

.as() {
  env i_NOINIT=1 i_LABEL="print $1" i_TITLE=$1 i_fcolor=$2 zsh
}

.with() {
  name=$1
  last=$($i_LABEL)
  env i_NOINIT=1 i_LABEL="print $name${name:+ }$last" i_TITLE=$1 i_fcolor=$i_fcolor zsh
}

+ld () {
    curpath=$(pwd)
    export LD_LIBRARY_PATH=$curpath:$LD_LIBRARY_PATH
}

+path () {
    curpath=$(pwd)
    export PATH=$curpath:$PATH
}

+jars () {
    for i in *.jar;
    do
        JARS="$PWD/$i:$JARS"
    done
}

homejars () {
    for i in ~/.home/jars/*.jar;
    do
        CLASSPATH="$i:$CLASSPATH"
    done
}

simpleprompts(){
    export PS1="| "
    export PS2="| "
    export PS3=". "
    export RPS1=""
}

me() {
    print "bluFox"
}

vtterm() {
    export OTERM=$TERM
    export TERM=vt100
}

findcscope() {
    CWD=`pwd`
    while test ! -f "$CWD/cscope.out" ; do
        CWD=`dirname $CWD`
        #echo "checking in $CWD"
    done
    if test -f "$CWD/cscope.out" ; then
        export CSCOPE_DB="$CWD/cscope.out"
        echo "$CWD/cscope.out"
    fi
}

updatecscope() {
    CWD=`pwd`
    while test ! -f "$CWD/cscope.files" ; do
        CWD=`dirname $CWD`
        echo "checking in $CWD"
    done
    if test -f "$CWD/cscope.files" ; then
        (cd $CWD;
            find $CWD -name "*.$1" > cscope.files
            cscope -b -i $CWD/cscope.files
            #ctags -L $CWD/cscope.files
        )
        export CSCOPE_DB="$CWD/cscope.out"
        echo "$CWD/cscope.out"
    fi
}


datenow() {
    date '+%d-%b'
}

version() {
    file=$1
    bak=`date '+%d-%b:%H-%M-%S'`
    cp $file "$file-$bak"
}

_remote() {
    env -u HISTFILE PATH=$PATH:$REMOTE_PATH i_NOINIT=1 zsh
}

_puppet() {
  cmd=$1
  last=$($i_LABEL)
  (cd ~/src/puppet &&
      ./ext/envpuppet env HISTFILE=~/.zsh/puppet.history i_CDSTACK=$((i_CDSTACK + 1)) DIRS="$DIRS $PWD" i_NOINIT=1 i_TITLE=puppet i_fcolor=green i_LABEL="print $last puppet" ${cmd:-zsh})
}
_acceptance() {
  cmd=$1
  last=$($i_LABEL)
  alias run_accepttests="./systest.rb -c ci/ci-solaris11.cfg --debug --type git -p origin/3.x -f origin/2.x -t acceptance-tests/tests"
  (cd ~/acceptance/puppet/puppet-acceptance &&
      env HISTFILE=~/.zsh/acceptance.history i_CDSTACK=$((i_CDSTACK + 1)) DIRS="$DIRS $PWD" i_NOINIT=1 i_TITLE=acceptance i_fcolor=red i_LABEL="$print $last accept" ${cmd:-zsh} )
}

decolorize() {
  sed -e "s/\x1b\[.\{1,5\}m//g"
}

_rootenv() {
  sudo -E env -u HISTFILE PS1='# ' zsh
}
_root() {
  sudo -E env -u HISTFILE PS1='# ' zsh
}


_clone_research() {
  cmd=$1
  last=$($i_LABEL)
  (cd ~/bak/java-clones/ && env i_NOINIT=1 HISTFILE=~/.zsh/clone.history i_TITLE=clones i_LABEL="print $last clones" i_fcolor=green ${cmd:-zsh})
}

hgdiff() {
    hg diff | sed -e 's/^\(diff.*\)$/\x1b\x5b1;31;40m\1\x1b\x5b0;37;40m/g'
}

rpath() {
    case $ARCH in
        SunOS*)
        dump -Lv $1
        ;;
        *)
        readelf -d $1
        ;;
    esac
}

_init_home() {
  git clone https://github.com/vrthra/._.git ~/
}

track() {
  pstree -p -u -s -a $$
}

.detach() {
  kill -s STOP $$
}
alias .detach .stop
